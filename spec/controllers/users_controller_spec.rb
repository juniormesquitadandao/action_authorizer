require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe UsersController, :type => :controller do

  # This should return the minimal set of attributes required to create a valid
  # User. As you add validations to User, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    FactoryGirl.attributes_for :user
  }

  let(:invalid_attributes) {
    {name: nil}
  }

  it { is_expected.to use_before_action(:authenticate_user!) }
  it { is_expected.to use_before_action(:authorize!) }

  describe "GET #index" do
    it "assigns all users as @users" do
      user = User.create! valid_attributes

      users = [User.new]
      expect(User).to receive(:for).with(controller.current_user).and_return(users)

      process :index, method: :get
      expect(assigns(:users)).to eq(users)
    end
  end

  describe "GET #show" do
    it "assigns the requested user as @user" do
      user = User.create! valid_attributes
      process :show, method: :get, params: {id: user.to_param}
      expect(assigns(:user)).to eq(user)
    end
  end

  describe "GET #new" do
    it "assigns a new user as @user" do
      process :new, method: :get
      expect(assigns(:user)).to be_a_new(User)
    end
  end

  describe "GET #edit" do
    it "assigns the requested user as @user" do
      user = User.create! valid_attributes
      process :edit, method: :get, params: {id: user.to_param}
      expect(assigns(:user)).to eq(user)
    end
  end

  describe "POST #create" do

    it 'permited params' do
      params = {
        user: {
          name: '',
          admin: '',
          email: '',
          password: '',
          password_confirmatio: ''
        }
      }
      is_expected.to permit(:name, :admin, :email, :password, :password_confirmation).for(:create, params: params).on(:user)
    end

    context "with valid params" do
      it "creates a new User" do
        expect {
          process :create, method: :post, params: {user: valid_attributes}
        }.to change(User, :count).by(1)
      end

      it "assigns a newly created user as @user" do
        process :create, method: :post, params: {user: valid_attributes}
        expect(assigns(:user)).to be_a(User)
        expect(assigns(:user)).to be_persisted
      end

      it "redirects to the created user" do
        process :create, method: :post, params: {user: valid_attributes}
        expect(response).to redirect_to(User.last)
      end
    end

    context "with invalid params" do
      it "assigns a newly created but unsaved user as @user" do
        process :create, method: :post, params: {user: invalid_attributes}
        expect(assigns(:user)).to be_a_new(User)
      end

      it "re-renders the 'new' template" do
        process :create, method: :post, params: {user: invalid_attributes}
        expect(response).to render_template("new")
      end
    end
  end

  describe "PUT #update" do

    it 'permited params' do
      user = User.create! valid_attributes
      params = {
        id: user.id,
        user: {
          name: '',
          admin: '',
          email: '',
          password: '',
          password_confirmatio: ''
        }
      }
      is_expected.to permit(:name, :admin, :email, :password, :password_confirmation).for(:update, params: params).on(:user)
    end

    context "with valid params" do
      let(:new_attributes) {
        {name: "Other"}
      }

      it "updates the requested user" do
        user = User.create! valid_attributes
        process :update, method: :put, params: {id: user.to_param, user: new_attributes}
        user.reload
        expect(user.name).to eq "Other"
      end

      it "assigns the requested user as @user" do
        user = User.create! valid_attributes
        process :update, method: :put, params: {id: user.to_param, user: valid_attributes}
        expect(assigns(:user)).to eq(user)
      end

      it "redirects to the user" do
        user = User.create! valid_attributes
        process :update, method: :put, params: {id: user.to_param, user: valid_attributes}
        expect(response).to redirect_to(user)
      end
    end

    context "with invalid params" do
      it "assigns the user as @user" do
        user = User.create! valid_attributes
        process :update, method: :put, params: {id: user.to_param, user: invalid_attributes}
        expect(assigns(:user)).to eq(user)
      end

      it "re-renders the 'edit' template" do
        user = User.create! valid_attributes
        process :update, method: :put, params: {id: user.to_param, user: invalid_attributes}
        expect(response).to render_template("edit")
      end
    end
  end

  describe "DELETE #destroy" do
    it "destroys the requested user" do
      user = User.create! valid_attributes
      expect {
        process :destroy, method: :delete, params: {id: user.to_param}
      }.to change(User, :count).by(-1)
    end

    it "redirects to the users list" do
      user = User.create! valid_attributes
      process :destroy, method: :delete, params: {id: user.to_param}
      expect(response).to redirect_to(users_url)
    end
  end

end
